1)	fare pulizia di memoria
1.1)	gestire la pulizia in un'unica funzione
2)	disegnare linee "tridimensionali", ovvero le proiezioni sul piano XY
2.1)	utilizzare diversi diversi colori a seconda della diversa altezza dei punti della linea
3)	usare più immagini
4)	stampare una legenda
5)	stampare in 3d

2)	Partiamo dalla cosa più rognosa, ovvero disegnare una linea che vive in 3 dimensioni; infatti la linea deve cambiare colore in base all'altezza del punto della linea che si sta disegnando.
	Per fare ciò abbiamo bisogno di proiettare sullo schermo una linea tridimensionale, tenendo conto di due colori (START_COLOR e END_COLOR) e utilizzare l'algoritmo di interpolazione lineare per calcolare il colore di ogni pixel.
	L'algoritmo che abbiamo scritto infatti, presupponeva un colore fisso, senza tener conto in generale quindi di una terza dimensione. Per disegnare la linea nelle tre dimensioni, la proiettiamo sul piano XY moltiplicandola con la matrice [[1,0,0],[0,1,0],[0,0,0]], mentre il colore di ogni pixel deve sottostare alla seguente formula:

	 (n - i)	|Rs|	i	 |Re|
	--------- *	|Gs| + --- * |Ge|
		n		|Bs|	n	 |Be|

	dove per [Rs,Gs,Bs], [Re,Ge,Be] si intende rispettivamente START_COLOR, END_COLOR; mentre invece n = (stop - start) sono il numero di pixel e i=0, ..., n è l'indice del pixel della linea da colorare.
	La precedente espressione può essere semplificata fino a:

	|Rs|		|(Re-Rs)/n|
	|Gs| + i *	|(Ge-Gs)/n|
	|Bs|		|(Be-Bs)/n|

	affinché la variabile che tiene conto del colore possa essere modificata ad ogni ciclo semplicemente aggiungendo la quantità costante a destra.

	A parte qualche possibile e qualche necessario miglioramento, sono riuscito ad avere un risultato soddisfacente per quanto riguarda il disegno di linee in 3 dimensioni, anche se i colori dovranno essere di volta in volta calcolati in base ai valori z dei punti di inizio e di fine della linea.

1)	La pulizia della memoria è stata eseguita correttamente: non è stato nulla di così preoccupante, solo da aggiustare le funzioni così che non ci fossero double free.

3)	Invece di usare più immagini, si può utilizzare la stessa immagine e ogni volta che si deve cambiare qualcosa, usare bzero per 'eliminare il colore', ovvero colorare di nero. Si può allora scegliere di utilizzare memset per colorare di un colore diverso l'immagine.

2.1)	Per fare ciò è necessario calcolare con il solito algoritmo di interpolazione lineare i colori di inizio e di fine della linea valutando due colori base per l'altezza minima e massima rispettivamente. Necessario è quindi calcolare il valore minimo e quello massimo della mappa. Dato che è un compito alquanto semplice, concentriamoci allora sul disegno in 3d.

5)	Per rendere sullo schermo (2d) una figura 3d, ci dobbiamo solo servire dell'algebra lineare. Infatti un sistema di punti può subire trasformazioni, tra cui traslazioni nello spazio, rotazioni nello spazio, e altre. In generale queste sono operazioni su vettori e infine basterà proiettare i punti sul piano xy per disegnare sullo schermo l'oggetto tridimensionale che abbiamo creato. Quindi, soffermiamoci in primis sulla prospettiva ortogonale.

4)	Ci ho ripensato: stampiamo prima la legenda, utilizzando un altra immagine, quasi trasparente, che verrà sovrapposta all'altra immagine sullo schermo. Purtroppo le stringhe non vengono stampate su un immagine bensì sulla finestra stessa, quindi l'idea di utilizzare dei 'layers' non può essere portata avanti. Comunque, ci sono riuscito, non è stato difficile.
